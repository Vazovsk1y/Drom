// <auto-generated />
using System;
using Drom.WPF.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Drom.WPF.DAL.Migrations
{
    [DbContext(typeof(DromDbContext))]
    [Migration("20250605181712_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:CollationDefinition:case_insensitive_collation", "und-u-ks-level1,und-u-ks-level1,icu,False")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Drom.WPF.DAL.Models.Ad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarBrandName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CarModelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CarYear")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<bool>("Sold")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("SoldDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Ads");
                });

            modelBuilder.Entity("Drom.WPF.DAL.Models.AdImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AdId", "IsMain")
                        .IsUnique()
                        .HasFilter("\"IsMain\" = true");

                    b.ToTable("AdImages");
                });

            modelBuilder.Entity("Drom.WPF.DAL.Models.FavoriteAd", b =>
                {
                    b.Property<Guid>("AdId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("AdId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteAds");
                });

            modelBuilder.Entity("Drom.WPF.DAL.Models.NewsItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("CoverImage")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTimeOffset>("PublicationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Drom.WPF.DAL.Models.NewsItemComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("NewsItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("PublicationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NewsItemId");

                    b.HasIndex("UserId");

                    b.ToTable("NewsItemComments");
                });

            modelBuilder.Entity("Drom.WPF.DAL.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("RegistrationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("case_insensitive_collation");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ee9159b-2673-4a0c-8a94-fc6384e64565"),
                            PasswordHash = "$2a$11$AqjCOw8ml9R9dn8v2TS4vetA8rKBdeZk2MJe8tpE29bs1CBIAk8RG",
                            PhoneNumber = "+7 999 999 9999",
                            RegistrationDateTime = new DateTimeOffset(new DateTime(2025, 6, 5, 18, 17, 12, 101, DateTimeKind.Unspecified).AddTicks(1119), new TimeSpan(0, 0, 0, 0, 0)),
                            Role = "Admin",
                            Username = "Admin"
                        });
                });

            modelBuilder.Entity("Drom.WPF.DAL.Models.Ad", b =>
                {
                    b.HasOne("Drom.WPF.DAL.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drom.WPF.DAL.Models.AdImage", b =>
                {
                    b.HasOne("Drom.WPF.DAL.Models.Ad", null)
                        .WithMany("AdImages")
                        .HasForeignKey("AdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Drom.WPF.DAL.Models.FavoriteAd", b =>
                {
                    b.HasOne("Drom.WPF.DAL.Models.Ad", "Ad")
                        .WithMany()
                        .HasForeignKey("AdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drom.WPF.DAL.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ad");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drom.WPF.DAL.Models.NewsItemComment", b =>
                {
                    b.HasOne("Drom.WPF.DAL.Models.NewsItem", "NewsItem")
                        .WithMany()
                        .HasForeignKey("NewsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drom.WPF.DAL.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Drom.WPF.DAL.Models.Ad", b =>
                {
                    b.Navigation("AdImages");
                });
#pragma warning restore 612, 618
        }
    }
}
